[
    {
        "commitTag": "1.0",
        "commitMsg": "Importovanie knižnice Retrofit",
        "commitHash": "12609459536f00532cd5a8b1f2b59fe5e1dd55b4",
        "commitDiff": "diff --git a/.idea/runConfigurations/run.xml b/.idea/runConfigurations/run.xml\nnew file mode 100644\nindex 0000000..b117c64\n--- /dev/null\n+++ b/.idea/runConfigurations/run.xml\n@@ -0,0 +1,9 @@\n+<component name=\"ProjectRunConfigurationManager\">\n+  <configuration default=\"false\" name=\"run\" type=\"Application\" factoryName=\"Application\">\n+    <option name=\"MAIN_CLASS_NAME\" value=\"sk.fri.uniza.App\" />\n+    <module name=\"IoTNode\" />\n+    <method v=\"2\">\n+      <option name=\"Make\" enabled=\"true\" />\n+    </method>\n+  </configuration>\n+</component>\n\\ No newline at end of file\ndiff --git a/pom.xml b/pom.xml\nindex 6421173..b2b7111 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -26,6 +26,17 @@\n       <scope>test</scope>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.squareup.retrofit2</groupId>\n+      <artifactId>converter-jackson</artifactId>\n+      <version>2.8.1</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.squareup.retrofit2</groupId>\n+      <artifactId>retrofit</artifactId>\n+      <version>2.8.1</version>\n+    </dependency>\n \n     <dependency>\n       <groupId>commons-lang</groupId>\n",
        "remoteUrl": "https://github.com/hudikm/IoTNode_CPD2020.git",
        "fileList": " .\n └─ src\n    ├─ test\n    │  └─ java\n    │     └─ sk\n    │        └─ fri\n    │           └─ uniza\n    │              ├─ NoAuth\n    │              │  └─ WeatherStationTest.java\n    │              └─ Auth\n    │                 └─ WeatherStationAuthTest.java\n    └─ main\n       └─ java\n          └─ sk\n             └─ fri\n                └─ uniza\n                   ├─ model\n                   │  ├─ Location.java\n                   │  ├─ Token.java\n                   │  └─ WeatherData.java\n                   ├─ api\n                   │  └─ WeatherStationService.java\n                   ├─ App.java\n                   └─ IotNode.java"
    },
    {
        "commitTag": "1.1",
        "commitMsg": "Vytvorenie rozhrania pre službu WeatherStation",
        "commitHash": "a4f6c7a4048ba65376826d0a30d4991424f9c2ec",
        "commitDiff": "diff --git a/src/main/java/sk/fri/uniza/api/WeatherStationService.java b/src/main/java/sk/fri/uniza/api/WeatherStationService.java\nindex fa7ae0c..1c2039d 100644\n--- a/src/main/java/sk/fri/uniza/api/WeatherStationService.java\n+++ b/src/main/java/sk/fri/uniza/api/WeatherStationService.java\n@@ -12,7 +12,9 @@ import java.util.Map;\n \n public interface WeatherStationService {\n \n-    // ... getCurrentWeatherAsMap(station);\n+    @GET(\"/weather/{station}/current\")\n+    Call<Map<String, String>> getCurrentWeatherAsMap(\n+            @Path(\"station\") String station);\n \n \n     // ... getCurrentWeatherAsMap(station, fields);\n",
        "remoteUrl": "https://github.com/hudikm/IoTNode_CPD2020.git",
        "fileList": " .\n └─ src\n    ├─ test\n    │  └─ java\n    │     └─ sk\n    │        └─ fri\n    │           └─ uniza\n    │              ├─ NoAuth\n    │              │  └─ WeatherStationTest.java\n    │              └─ Auth\n    │                 └─ WeatherStationAuthTest.java\n    └─ main\n       └─ java\n          └─ sk\n             └─ fri\n                └─ uniza\n                   ├─ model\n                   │  ├─ Location.java\n                   │  ├─ Token.java\n                   │  └─ WeatherData.java\n                   ├─ api\n                   │  └─ WeatherStationService.java\n                   ├─ App.java\n                   └─ IotNode.java"
    },
    {
        "commitTag": "1.2",
        "commitMsg": "Inicializovanie Retrofit klienta",
        "commitHash": "92b028b6ecd69e3f580581c7b3338e81c14f81f4",
        "commitDiff": "diff --git a/src/main/java/sk/fri/uniza/IotNode.java b/src/main/java/sk/fri/uniza/IotNode.java\nindex 2e3f91d..38cd941 100644\n--- a/src/main/java/sk/fri/uniza/IotNode.java\n+++ b/src/main/java/sk/fri/uniza/IotNode.java\n@@ -5,5 +5,24 @@ import retrofit2.converter.jackson.JacksonConverterFactory;\n import sk.fri.uniza.api.WeatherStationService;\n \n public class IotNode {\n+    private final Retrofit retrofit;\n+    private final WeatherStationService weatherStationService;\n \n+    public IotNode() {\n+\n+        retrofit = new Retrofit.Builder()\n+                // Url adresa kde je umietnená WeatherStation služba\n+                .baseUrl(\"http://localhost:9000/\")\n+                // Na konvertovanie JSON objektu na java POJO použijeme\n+                // Jackson knižnicu\n+                .addConverterFactory(JacksonConverterFactory.create())\n+                .build();\n+        // Vytvorenie inštancie komunikačného rozhrania\n+        weatherStationService = retrofit.create(WeatherStationService.class);\n+\n+    }\n+\n+    public WeatherStationService getWeatherStationService() {\n+        return weatherStationService;\n+    }\n }\n",
        "remoteUrl": "https://github.com/hudikm/IoTNode_CPD2020.git",
        "fileList": " .\n └─ src\n    ├─ test\n    │  └─ java\n    │     └─ sk\n    │        └─ fri\n    │           └─ uniza\n    │              ├─ NoAuth\n    │              │  └─ WeatherStationTest.java\n    │              └─ Auth\n    │                 └─ WeatherStationAuthTest.java\n    └─ main\n       └─ java\n          └─ sk\n             └─ fri\n                └─ uniza\n                   ├─ model\n                   │  ├─ Location.java\n                   │  ├─ Token.java\n                   │  └─ WeatherData.java\n                   ├─ api\n                   │  └─ WeatherStationService.java\n                   ├─ App.java\n                   └─ IotNode.java"
    },
    {
        "commitTag": "1.3.a",
        "commitMsg": "Vytvorenie požiadavky na získanie údajov o aktuálnom počasí",
        "commitHash": "83496648ea9805d9e304673d7b374614495a2413",
        "commitDiff": "diff --git a/src/main/java/sk/fri/uniza/App.java b/src/main/java/sk/fri/uniza/App.java\nindex 54f3254..2704861 100644\n--- a/src/main/java/sk/fri/uniza/App.java\n+++ b/src/main/java/sk/fri/uniza/App.java\n@@ -1,10 +1,22 @@\n package sk.fri.uniza;\n \n+import retrofit2.Call;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n /**\n  * Hello IoT!\n  */\n public class App {\n     public static void main(String[] args) {\n+        IotNode iotNode = new IotNode();\n+        // Vytvorenie požiadavky na získanie údajov o aktuálnom počasí z\n+        // meteo stanice s ID: station_1\n+        Call<Map<String, String>> currentWeather =\n+                iotNode.getWeatherStationService()\n+                        .getCurrentWeatherAsMap(\"station_1\");\n+\n \n     }\n }\n",
        "remoteUrl": "https://github.com/hudikm/IoTNode_CPD2020.git",
        "fileList": " .\n └─ src\n    ├─ test\n    │  └─ java\n    │     └─ sk\n    │        └─ fri\n    │           └─ uniza\n    │              ├─ NoAuth\n    │              │  └─ WeatherStationTest.java\n    │              └─ Auth\n    │                 └─ WeatherStationAuthTest.java\n    └─ main\n       └─ java\n          └─ sk\n             └─ fri\n                └─ uniza\n                   ├─ model\n                   │  ├─ Location.java\n                   │  ├─ Token.java\n                   │  └─ WeatherData.java\n                   ├─ api\n                   │  └─ WeatherStationService.java\n                   ├─ App.java\n                   └─ IotNode.java"
    },
    {
        "commitTag": "1.3.b",
        "commitMsg": "Odoslanie požiadavky a spracovanie odpovede",
        "commitHash": "a5f5ff03ae4573f4952b9ffb25ae7f215cfbd7b2",
        "commitDiff": "diff --git a/src/main/java/sk/fri/uniza/App.java b/src/main/java/sk/fri/uniza/App.java\nindex 2704861..27b201a 100644\n--- a/src/main/java/sk/fri/uniza/App.java\n+++ b/src/main/java/sk/fri/uniza/App.java\n@@ -1,7 +1,9 @@\n package sk.fri.uniza;\n \n import retrofit2.Call;\n+import retrofit2.Response;\n \n+import java.io.IOException;\n import java.util.List;\n import java.util.Map;\n \n@@ -18,5 +20,19 @@ public class App {\n                         .getCurrentWeatherAsMap(\"station_1\");\n \n \n+        try {\n+            // Odoslanie požiadavky na server pomocou REST rozhranie\n+            Response<Map<String, String>> response = currentWeather.execute();\n+\n+            if (response.isSuccessful()) { // Dotaz na server bol neúspešný\n+                //Získanie údajov vo forme Mapy stringov\n+                Map<String, String> body = response.body();\n+                System.out.println(body);\n+            }\n+\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n     }\n }\n",
        "remoteUrl": "https://github.com/hudikm/IoTNode_CPD2020.git",
        "fileList": " .\n └─ src\n    ├─ test\n    │  └─ java\n    │     └─ sk\n    │        └─ fri\n    │           └─ uniza\n    │              ├─ NoAuth\n    │              │  └─ WeatherStationTest.java\n    │              └─ Auth\n    │                 └─ WeatherStationAuthTest.java\n    └─ main\n       └─ java\n          └─ sk\n             └─ fri\n                └─ uniza\n                   ├─ model\n                   │  ├─ Location.java\n                   │  ├─ Token.java\n                   │  └─ WeatherData.java\n                   ├─ api\n                   │  └─ WeatherStationService.java\n                   ├─ App.java\n                   └─ IotNode.java"
    },
    {
        "commitTag": "IGNORE",
        "commitMsg": "",
        "commitHash": "0a72512578c14dd2078ee9ce6f8a3adf90678b20",
        "commitDiff": "diff --git a/.idea/codeStyles/codeStyleConfig.xml b/.idea/codeStyles/codeStyleConfig.xml\nindex 7f9d6a5..82c2e2f 100644\n--- a/.idea/codeStyles/codeStyleConfig.xml\n+++ b/.idea/codeStyles/codeStyleConfig.xml\n@@ -1,5 +1,6 @@\n <component name=\"ProjectCodeStyleConfiguration\">\n   <state>\n+    <option name=\"USE_PER_PROJECT_SETTINGS\" value=\"true\" />\n     <option name=\"PREFERRED_PROJECT_CODE_STYLE\" value=\"Project\" />\n   </state>\n </component>\n\\ No newline at end of file\n",
        "remoteUrl": "https://github.com/hudikm/IoTNode_CPD2020.git",
        "fileList": " .\n └─ src\n    ├─ test\n    │  └─ java\n    │     └─ sk\n    │        └─ fri\n    │           └─ uniza\n    │              ├─ NoAuth\n    │              │  └─ WeatherStationTest.java\n    │              └─ Auth\n    │                 └─ WeatherStationAuthTest.java\n    └─ main\n       └─ java\n          └─ sk\n             └─ fri\n                └─ uniza\n                   ├─ model\n                   │  ├─ Location.java\n                   │  ├─ Token.java\n                   │  └─ WeatherData.java\n                   ├─ api\n                   │  └─ WeatherStationService.java\n                   ├─ App.java\n                   └─ IotNode.java"
    },
    {
        "commitTag": "1.4",
        "commitMsg": "Upresnenie požiadavky o aké údaje máme záujem",
        "commitHash": "d5d3c704a5ffceafba6950be1445fd70d2d46f17",
        "commitDiff": "diff --git a/src/main/java/sk/fri/uniza/App.java b/src/main/java/sk/fri/uniza/App.java\nindex 27b201a..d6b1afa 100644\n--- a/src/main/java/sk/fri/uniza/App.java\n+++ b/src/main/java/sk/fri/uniza/App.java\n@@ -17,7 +17,9 @@ public class App {\n         // meteo stanice s ID: station_1\n         Call<Map<String, String>> currentWeather =\n                 iotNode.getWeatherStationService()\n-                        .getCurrentWeatherAsMap(\"station_1\");\n+                        .getCurrentWeatherAsMap(\"station_1\",\n+                                List.of(\"time\", \"date\",\n+                                        \"airTemperature\"));\n \n \n         try {\ndiff --git a/src/main/java/sk/fri/uniza/api/WeatherStationService.java b/src/main/java/sk/fri/uniza/api/WeatherStationService.java\nindex 1c2039d..f6f356f 100644\n--- a/src/main/java/sk/fri/uniza/api/WeatherStationService.java\n+++ b/src/main/java/sk/fri/uniza/api/WeatherStationService.java\n@@ -17,7 +17,10 @@ public interface WeatherStationService {\n             @Path(\"station\") String station);\n \n \n-    // ... getCurrentWeatherAsMap(station, fields);\n+    @GET(\"/weather/{station}/current\")\n+    Call<Map<String, String>> getCurrentWeatherAsMap(\n+            @Path(\"station\") String station,\n+            @Query(\"fields\") List<String> fields);\n \n \n     // ... getStationLocations();\n",
        "remoteUrl": "https://github.com/hudikm/IoTNode_CPD2020.git",
        "fileList": " .\n └─ src\n    ├─ test\n    │  └─ java\n    │     └─ sk\n    │        └─ fri\n    │           └─ uniza\n    │              ├─ NoAuth\n    │              │  └─ WeatherStationTest.java\n    │              └─ Auth\n    │                 └─ WeatherStationAuthTest.java\n    └─ main\n       └─ java\n          └─ sk\n             └─ fri\n                └─ uniza\n                   ├─ model\n                   │  ├─ Location.java\n                   │  ├─ Token.java\n                   │  └─ WeatherData.java\n                   ├─ api\n                   │  └─ WeatherStationService.java\n                   ├─ App.java\n                   └─ IotNode.java"
    },
    {
        "commitTag": "1.5.a",
        "commitMsg": "Získanie zoznamu dostupných meteorologických staníc",
        "commitHash": "dc8b57334deb9062d2a2cdc6d375d4adfd30db72",
        "commitDiff": "diff --git a/src/main/java/sk/fri/uniza/App.java b/src/main/java/sk/fri/uniza/App.java\nindex d6b1afa..0369070 100644\n--- a/src/main/java/sk/fri/uniza/App.java\n+++ b/src/main/java/sk/fri/uniza/App.java\n@@ -2,6 +2,7 @@ package sk.fri.uniza;\n \n import retrofit2.Call;\n import retrofit2.Response;\n+import sk.fri.uniza.model.Location;\n \n import java.io.IOException;\n import java.util.List;\n@@ -36,5 +37,23 @@ public class App {\n             e.printStackTrace();\n         }\n \n+        // Vytvorenie požiadavky na získanie údajov o všetkých meteo staniciach\n+        Call<List<Location>> stationLocations =\n+                iotNode.getWeatherStationService().getStationLocations();\n+\n+        try {\n+            Response<List<Location>> response = stationLocations.execute();\n+\n+            if (response.isSuccessful()) { // Dotaz na server bol neúspešný\n+                //Získanie údajov vo forme Zoznam lokacií\n+                List<Location> body = response.body();\n+\n+                System.out.println(body);\n+            }\n+\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n     }\n }\ndiff --git a/src/main/java/sk/fri/uniza/api/WeatherStationService.java b/src/main/java/sk/fri/uniza/api/WeatherStationService.java\nindex f6f356f..77ee4e4 100644\n--- a/src/main/java/sk/fri/uniza/api/WeatherStationService.java\n+++ b/src/main/java/sk/fri/uniza/api/WeatherStationService.java\n@@ -23,7 +23,8 @@ public interface WeatherStationService {\n             @Query(\"fields\") List<String> fields);\n \n \n-    // ... getStationLocations();\n+    @GET(\"/weather/locations\")\n+    Call<List<Location>> getStationLocations();\n \n \n     // ... getCurrentWeather(station);\n",
        "remoteUrl": "https://github.com/hudikm/IoTNode_CPD2020.git",
        "fileList": " .\n └─ src\n    ├─ test\n    │  └─ java\n    │     └─ sk\n    │        └─ fri\n    │           └─ uniza\n    │              ├─ NoAuth\n    │              │  └─ WeatherStationTest.java\n    │              └─ Auth\n    │                 └─ WeatherStationAuthTest.java\n    └─ main\n       └─ java\n          └─ sk\n             └─ fri\n                └─ uniza\n                   ├─ model\n                   │  ├─ Location.java\n                   │  ├─ Token.java\n                   │  └─ WeatherData.java\n                   ├─ api\n                   │  └─ WeatherStationService.java\n                   ├─ App.java\n                   └─ IotNode.java"
    },
    {
        "commitTag": "1.5.b",
        "commitMsg": "Úpráva java triedy Location",
        "commitHash": "16ab197ece5f2f7a7aba905db3212118e5f45ff2",
        "commitDiff": "diff --git a/src/main/java/sk/fri/uniza/model/Location.java b/src/main/java/sk/fri/uniza/model/Location.java\nindex 96cf97b..747d732 100644\n--- a/src/main/java/sk/fri/uniza/model/Location.java\n+++ b/src/main/java/sk/fri/uniza/model/Location.java\n@@ -3,6 +3,65 @@ package sk.fri.uniza.model;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n public class Location {\n+    @JsonProperty(\"id\")\n+    private String id;\n+    @JsonProperty(\"country\")\n+    private String country;\n+    @JsonProperty(\"address\")\n+    private String address;\n+    @JsonProperty(\"town\")\n+    private String town;\n+    @JsonProperty(\"gps\")\n+    private String gps;\n \n+    public String getId() {\n+        return id;\n+    }\n \n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(String address) {\n+        this.address = address;\n+    }\n+\n+    public String getTown() {\n+        return town;\n+    }\n+\n+    public void setTown(String town) {\n+        this.town = town;\n+    }\n+\n+    public String getGps() {\n+        return gps;\n+    }\n+\n+    public void setGps(String gps) {\n+        this.gps = gps;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Location{\" +\n+                \"id='\" + id + '\\'' +\n+                \", country='\" + country + '\\'' +\n+                \", address='\" + address + '\\'' +\n+                \", town='\" + town + '\\'' +\n+                \", gps='\" + gps + '\\'' +\n+                '}';\n+    }\n }\n\\ No newline at end of file\n",
        "remoteUrl": "https://github.com/hudikm/IoTNode_CPD2020.git",
        "fileList": " .\n └─ src\n    ├─ test\n    │  └─ java\n    │     └─ sk\n    │        └─ fri\n    │           └─ uniza\n    │              ├─ NoAuth\n    │              │  └─ WeatherStationTest.java\n    │              └─ Auth\n    │                 └─ WeatherStationAuthTest.java\n    └─ main\n       └─ java\n          └─ sk\n             └─ fri\n                └─ uniza\n                   ├─ model\n                   │  ├─ Location.java\n                   │  ├─ Token.java\n                   │  └─ WeatherData.java\n                   ├─ api\n                   │  └─ WeatherStationService.java\n                   ├─ App.java\n                   └─ IotNode.java"
    },
    {
        "commitTag": "1.6.a",
        "commitMsg": "Nahradenie všeobecnej Map<String, String> triedou WeatherData",
        "commitHash": "9b5a8e1ac7ee6ea7f3401ada673260075a883cfb",
        "commitDiff": "diff --git a/src/main/java/sk/fri/uniza/App.java b/src/main/java/sk/fri/uniza/App.java\nindex 0369070..fc77f55 100644\n--- a/src/main/java/sk/fri/uniza/App.java\n+++ b/src/main/java/sk/fri/uniza/App.java\n@@ -3,6 +3,7 @@ package sk.fri.uniza;\n import retrofit2.Call;\n import retrofit2.Response;\n import sk.fri.uniza.model.Location;\n+import sk.fri.uniza.model.WeatherData;\n \n import java.io.IOException;\n import java.util.List;\n@@ -55,5 +56,25 @@ public class App {\n             e.printStackTrace();\n         }\n \n+        // Vytvorenie požiadavky na získanie údajov o aktuálnom počasí z\n+        // meteo stanice s ID: station_1\n+        Call<WeatherData> currentWeatherPojo =\n+                iotNode.getWeatherStationService()\n+                        .getCurrentWeather(\"station_1\");\n+\n+\n+        try {\n+            // Odoslanie požiadavky na server pomocou REST rozhranie\n+            Response<WeatherData> response = currentWeatherPojo.execute();\n+\n+            if (response.isSuccessful()) { // Dotaz na server bol neúspešný\n+                //Získanie údajov vo forme inštancie triedy WeatherData\n+                WeatherData body = response.body();\n+                System.out.println(body);\n+            }\n+\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n     }\n }\ndiff --git a/src/main/java/sk/fri/uniza/api/WeatherStationService.java b/src/main/java/sk/fri/uniza/api/WeatherStationService.java\nindex 77ee4e4..916bd1f 100644\n--- a/src/main/java/sk/fri/uniza/api/WeatherStationService.java\n+++ b/src/main/java/sk/fri/uniza/api/WeatherStationService.java\n@@ -27,10 +27,12 @@ public interface WeatherStationService {\n     Call<List<Location>> getStationLocations();\n \n \n-    // ... getCurrentWeather(station);\n-\n+    @GET(\"/weather/{station}/current\")\n+    Call<WeatherData> getCurrentWeather(@Path(\"station\") String station);\n \n-    // ... getCurrentWeather(station, fields);\n+    @GET(\"/weather/{station}/current\")\n+    Call<WeatherData> getCurrentWeather(@Path(\"station\") String station,\n+                                        @Query(\"fields\") List<String> fields);\n \n \n     // ... getHistoryWeather(station, from, to);\n",
        "remoteUrl": "https://github.com/hudikm/IoTNode_CPD2020.git",
        "fileList": " .\n └─ src\n    ├─ test\n    │  └─ java\n    │     └─ sk\n    │        └─ fri\n    │           └─ uniza\n    │              ├─ NoAuth\n    │              │  └─ WeatherStationTest.java\n    │              └─ Auth\n    │                 └─ WeatherStationAuthTest.java\n    └─ main\n       └─ java\n          └─ sk\n             └─ fri\n                └─ uniza\n                   ├─ model\n                   │  ├─ Location.java\n                   │  ├─ Token.java\n                   │  └─ WeatherData.java\n                   ├─ api\n                   │  └─ WeatherStationService.java\n                   ├─ App.java\n                   └─ IotNode.java"
    },
    {
        "commitTag": "1.6.b",
        "commitMsg": "Nahradenie všeobecnej Map<String, String> triedou WeatherData",
        "commitHash": "3df339513924014ce8996a9a7461449584db520b",
        "commitDiff": "diff --git a/src/main/java/sk/fri/uniza/model/WeatherData.java b/src/main/java/sk/fri/uniza/model/WeatherData.java\nindex 1d6648b..8bceeae 100644\n--- a/src/main/java/sk/fri/uniza/model/WeatherData.java\n+++ b/src/main/java/sk/fri/uniza/model/WeatherData.java\n@@ -5,7 +5,265 @@ import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import org.apache.commons.lang.builder.ToStringBuilder;\n \n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\n+        \"Station Name\",\n+        \"Date\",\n+        \"Time\",\n+        \"Air Temperature\",\n+        \"Wet Bulb Temperature\",\n+        \"Humidity\",\n+        \"Rain Intensity\",\n+        \"Interval Rain\",\n+        \"Total Rain\",\n+        \"Precipitation Type\",\n+        \"Wind Direction\",\n+        \"Wind Speed\",\n+        \"Maximum Wind Speed\",\n+        \"Barometric Pressure\",\n+        \"Solar Radiation\",\n+        \"Heading\",\n+        \"Battery Life\",\n+        \"Measurement Timestamp Label\"\n+})\n public class WeatherData {\n \n+    @JsonProperty(\"Station Name\")\n+    private String stationName;\n+    @JsonProperty(\"Date\")\n+    private String date;\n+    @JsonProperty(\"Time\")\n+    private String time;\n+    @JsonProperty(\"Air Temperature\")\n+    private Double airTemperature;\n+    @JsonProperty(\"Wet Bulb Temperature\")\n+    private Double wetBulbTemperature;\n+    @JsonProperty(\"Humidity\")\n+    private Integer humidity;\n+    @JsonProperty(\"Rain Intensity\")\n+    private Integer rainIntensity;\n+    @JsonProperty(\"Interval Rain\")\n+    private Integer intervalRain;\n+    @JsonProperty(\"Total Rain\")\n+    private Integer totalRain;\n+    @JsonProperty(\"Precipitation Type\")\n+    private Integer precipitationType;\n+    @JsonProperty(\"Wind Direction\")\n+    private Integer windDirection;\n+    @JsonProperty(\"Wind Speed\")\n+    private Double windSpeed;\n+    @JsonProperty(\"Maximum Wind Speed\")\n+    private Double maximumWindSpeed;\n+    @JsonProperty(\"Barometric Pressure\")\n+    private Double barometricPressure;\n+    @JsonProperty(\"Solar Radiation\")\n+    private Integer solarRadiation;\n+    @JsonProperty(\"Heading\")\n+    private Integer heading;\n+    @JsonProperty(\"Battery Life\")\n+    private Integer batteryLife;\n+    @JsonProperty(\"Measurement Timestamp Label\")\n+    private String measurementTimestampLabel;\n+\n+    @JsonProperty(\"Station Name\")\n+    public String getStationName() {\n+        return stationName;\n+    }\n+\n+    @JsonProperty(\"Station Name\")\n+    public void setStationName(String stationName) {\n+        this.stationName = stationName;\n+    }\n+\n+    @JsonProperty(\"Date\")\n+    public String getDate() {\n+        return date;\n+    }\n+\n+    @JsonProperty(\"Date\")\n+    public void setDate(String date) {\n+        this.date = date;\n+    }\n+\n+    @JsonProperty(\"Time\")\n+    public String getTime() {\n+        return time;\n+    }\n+\n+    @JsonProperty(\"Time\")\n+    public void setTime(String time) {\n+        this.time = time;\n+    }\n+\n+    @JsonProperty(\"Air Temperature\")\n+    public Double getAirTemperature() {\n+        return airTemperature;\n+    }\n+\n+    @JsonProperty(\"Air Temperature\")\n+    public void setAirTemperature(Double airTemperature) {\n+        this.airTemperature = airTemperature;\n+    }\n+\n+    @JsonProperty(\"Wet Bulb Temperature\")\n+    public Double getWetBulbTemperature() {\n+        return wetBulbTemperature;\n+    }\n+\n+    @JsonProperty(\"Wet Bulb Temperature\")\n+    public void setWetBulbTemperature(Double wetBulbTemperature) {\n+        this.wetBulbTemperature = wetBulbTemperature;\n+    }\n+\n+    @JsonProperty(\"Humidity\")\n+    public Integer getHumidity() {\n+        return humidity;\n+    }\n+\n+    @JsonProperty(\"Humidity\")\n+    public void setHumidity(Integer humidity) {\n+        this.humidity = humidity;\n+    }\n+\n+    @JsonProperty(\"Rain Intensity\")\n+    public Integer getRainIntensity() {\n+        return rainIntensity;\n+    }\n+\n+    @JsonProperty(\"Rain Intensity\")\n+    public void setRainIntensity(Integer rainIntensity) {\n+        this.rainIntensity = rainIntensity;\n+    }\n+\n+    @JsonProperty(\"Interval Rain\")\n+    public Integer getIntervalRain() {\n+        return intervalRain;\n+    }\n+\n+    @JsonProperty(\"Interval Rain\")\n+    public void setIntervalRain(Integer intervalRain) {\n+        this.intervalRain = intervalRain;\n+    }\n+\n+    @JsonProperty(\"Total Rain\")\n+    public Integer getTotalRain() {\n+        return totalRain;\n+    }\n+\n+    @JsonProperty(\"Total Rain\")\n+    public void setTotalRain(Integer totalRain) {\n+        this.totalRain = totalRain;\n+    }\n+\n+    @JsonProperty(\"Precipitation Type\")\n+    public Integer getPrecipitationType() {\n+        return precipitationType;\n+    }\n+\n+    @JsonProperty(\"Precipitation Type\")\n+    public void setPrecipitationType(Integer precipitationType) {\n+        this.precipitationType = precipitationType;\n+    }\n+\n+    @JsonProperty(\"Wind Direction\")\n+    public Integer getWindDirection() {\n+        return windDirection;\n+    }\n+\n+    @JsonProperty(\"Wind Direction\")\n+    public void setWindDirection(Integer windDirection) {\n+        this.windDirection = windDirection;\n+    }\n+\n+    @JsonProperty(\"Wind Speed\")\n+    public Double getWindSpeed() {\n+        return windSpeed;\n+    }\n+\n+    @JsonProperty(\"Wind Speed\")\n+    public void setWindSpeed(Double windSpeed) {\n+        this.windSpeed = windSpeed;\n+    }\n+\n+    @JsonProperty(\"Maximum Wind Speed\")\n+    public Double getMaximumWindSpeed() {\n+        return maximumWindSpeed;\n+    }\n+\n+    @JsonProperty(\"Maximum Wind Speed\")\n+    public void setMaximumWindSpeed(Double maximumWindSpeed) {\n+        this.maximumWindSpeed = maximumWindSpeed;\n+    }\n+\n+    @JsonProperty(\"Barometric Pressure\")\n+    public Double getBarometricPressure() {\n+        return barometricPressure;\n+    }\n+\n+    @JsonProperty(\"Barometric Pressure\")\n+    public void setBarometricPressure(Double barometricPressure) {\n+        this.barometricPressure = barometricPressure;\n+    }\n+\n+    @JsonProperty(\"Solar Radiation\")\n+    public Integer getSolarRadiation() {\n+        return solarRadiation;\n+    }\n+\n+    @JsonProperty(\"Solar Radiation\")\n+    public void setSolarRadiation(Integer solarRadiation) {\n+        this.solarRadiation = solarRadiation;\n+    }\n+\n+    @JsonProperty(\"Heading\")\n+    public Integer getHeading() {\n+        return heading;\n+    }\n+\n+    @JsonProperty(\"Heading\")\n+    public void setHeading(Integer heading) {\n+        this.heading = heading;\n+    }\n+\n+    @JsonProperty(\"Battery Life\")\n+    public Integer getBatteryLife() {\n+        return batteryLife;\n+    }\n+\n+    @JsonProperty(\"Battery Life\")\n+    public void setBatteryLife(Integer batteryLife) {\n+        this.batteryLife = batteryLife;\n+    }\n+\n+    @JsonProperty(\"Measurement Timestamp Label\")\n+    public String getMeasurementTimestampLabel() {\n+        return measurementTimestampLabel;\n+    }\n+\n+    @JsonProperty(\"Measurement Timestamp Label\")\n+    public void setMeasurementTimestampLabel(String measurementTimestampLabel) {\n+        this.measurementTimestampLabel = measurementTimestampLabel;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).append(\"stationName\", stationName)\n+                .append(\"date\", date).append(\"time\", time)\n+                .append(\"airTemperature\", airTemperature)\n+                .append(\"wetBulbTemperature\", wetBulbTemperature)\n+                .append(\"humidity\", humidity)\n+                .append(\"rainIntensity\", rainIntensity)\n+                .append(\"intervalRain\", intervalRain)\n+                .append(\"totalRain\", totalRain)\n+                .append(\"precipitationType\", precipitationType)\n+                .append(\"windDirection\", windDirection)\n+                .append(\"windSpeed\", windSpeed)\n+                .append(\"maximumWindSpeed\", maximumWindSpeed)\n+                .append(\"barometricPressure\", barometricPressure)\n+                .append(\"solarRadiation\", solarRadiation)\n+                .append(\"heading\", heading).append(\"batteryLife\", batteryLife)\n+                .append(\"measurementTimestampLabel\", measurementTimestampLabel)\n+                .toString();\n+    }\n \n }\n\\ No newline at end of file\n",
        "remoteUrl": "https://github.com/hudikm/IoTNode_CPD2020.git",
        "fileList": " .\n └─ src\n    ├─ test\n    │  └─ java\n    │     └─ sk\n    │        └─ fri\n    │           └─ uniza\n    │              ├─ NoAuth\n    │              │  └─ WeatherStationTest.java\n    │              └─ Auth\n    │                 └─ WeatherStationAuthTest.java\n    └─ main\n       └─ java\n          └─ sk\n             └─ fri\n                └─ uniza\n                   ├─ model\n                   │  ├─ Location.java\n                   │  ├─ Token.java\n                   │  └─ WeatherData.java\n                   ├─ api\n                   │  └─ WeatherStationService.java\n                   ├─ App.java\n                   └─ IotNode.java"
    }
]